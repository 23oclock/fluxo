# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - build
  - short_runs

# =================================================================================================================================
# Stage "build"
# v>9 artifacts: name: "${CI_PIPELINE_ID}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
#
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script. 
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "cache:"         to reuse data in another job, the path to the data must be given in cache. the key allows to job using the 
#                  data to choose exactly the cache with the given key (see short_runs below)
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
# =================================================================================================================================
build_linadv:
  stage: build 
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 4 -stage 0 -buildhdf5 0 -case 100-199 
  after_script:
    - pwd 
  cache:
    key: ${CI_BUILD_NAME}
    paths:
    - tests/dirx_1[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/dirx_*/std.*

#--------------------------------------------------------------------------------------------------------------------------------
build_maxwell:
  stage: build 
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 4 -stage 0 -buildhdf5 0 -case 200-299 
  after_script:
    - pwd 
  cache:
    key: ${CI_BUILD_NAME}
    paths:
    - tests/dirx_2[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/log_*.txt

#--------------------------------------------------------------------------------------------------------------------------------
build_mhd:
  stage: build 
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 4 -stage 0 -buildhdf5 0 -case 300-399 
  after_script:
    - pwd 
  cache:
    key: ${CI_BUILD_NAME}
    paths:
    - tests/dirx_3[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/log_*.txt

#--------------------------------------------------------------------------------------------------------------------------------
build_nav-st:
  stage: build 
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 4 -stage 0 -buildhdf5 0 -case 400-499 
  after_script:
    - pwd 
  cache:
    key: ${CI_BUILD_NAME}
    paths:
    - tests/dirx_4[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/log_*.txt

# =================================================================================================================================
# Stage "short_runs"
# =================================================================================================================================
short_runs_linadv:
  stage: short_runs
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 2 -stage 2 -case 100-199 
  after_script:
    - pwd 
  cache:
    key: build_linadv
    paths:
    - tests/dirx_1[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/freestream/log_LINADV*.txt


#--------------------------------------------------------------------------------------------------------------------------------
short_runs_mhd:
  stage: short_runs
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 2 -stage 2 -case 300-399 
  after_script:
    - pwd 
  cache:
    key: build_mhd
    paths:
    - tests/dirx_3[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/freestream/log_MHD*.txt

#--------------------------------------------------------------------------------------------------------------------------------
short_runs_nav-st:
  stage: short_runs
  tags:
    - vm_linux
  only:
    - testCI
  before_script:
    - module list
  script: 
    - cd tests; pwd
    - python build_tests.py -p 2 -stage 2 -case 400-499 
  after_script:
    - pwd 
  cache:
    key: build_nav-st
    paths:
    - tests/dirx_4[0-9][0-9]*
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_BUILD_REF_NAME}_${CI_BUILD_NAME}"
    expire_in: 1 hour
    when: always
    paths:
    - tests/freestream/log_NAVIERSTOKES*.txt
